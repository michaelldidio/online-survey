{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\fatim\\\\Downloads\\\\formable-main\\\\src\\\\components\\\\FileField.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { uploadFile } from \"../db\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction FileField({\n  fieldModel,\n  onCompleted\n}) {\n  _s();\n\n  const [selectedFileName, setSelectedFileName] = useState(\"\");\n  const [progress, setProgress] = useState(0);\n  const [showPregress, setShowProgress] = useState(false);\n  const [err, setErr] = useState(\"\");\n\n  const handleFile = async e => {\n    setErr(\"\");\n    setProgress(0);\n    let file = e.target.files[0];\n    let ext = file.name.split('.').pop().toLowerCase();\n    if (!file) return;\n    if (fieldModel.accepted.indexOf(ext) === -1) return setErr(\"Choose file with thoe following extensions: \" + fieldModel.accepted.join(\", \")); //chechk if file size is biggern than  2MB\n\n    if (file.size > 2 * 1024 * 1024) return setErr(\"File size should be less than than 2MB\");\n    setShowProgress(true);\n    setSelectedFileName(file.name);\n    let fileName = +new Date() + \"-\" + file.name;\n    let task = uploadFile(file, fileName);\n    task.on(\"state_changed\", snapshot => {\n      let percentage = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n      setProgress(percentage);\n    }, err => setErr(err.message));\n    let snapshot = await task;\n    let downloadUrl = await snapshot.ref.getDownloadURL();\n    onCompleted(downloadUrl);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"input\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: [fieldModel.title, fieldModel.required && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"err\",\n        children: \"*\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 62\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"file-field\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        className: \"file\",\n        id: fieldModel.title.replace(\" \", \"\"),\n        onChange: handleFile\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"btn\",\n        htmlFor: fieldModel.title.replace(\" \", \"\"),\n        children: \"choose file\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: selectedFileName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), showPregress && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress-bar\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress\",\n        style: {\n          width: progress + \"%\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), err && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"err\",\n      children: err\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 22\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n}\n\n_s(FileField, \"ot9ko3KUrhMm22rkC7pM/5AiTPw=\");\n\n_c = FileField;\nexport default FileField;\n\nvar _c;\n\n$RefreshReg$(_c, \"FileField\");","map":{"version":3,"sources":["C:/Users/fatim/Downloads/formable-main/src/components/FileField.js"],"names":["useState","uploadFile","FileField","fieldModel","onCompleted","selectedFileName","setSelectedFileName","progress","setProgress","showPregress","setShowProgress","err","setErr","handleFile","e","file","target","files","ext","name","split","pop","toLowerCase","accepted","indexOf","join","size","fileName","Date","task","on","snapshot","percentage","bytesTransferred","totalBytes","message","downloadUrl","ref","getDownloadURL","title","required","replace","width"],"mappings":"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","sourcesContent":["import { useState } from 'react'\n\nimport { uploadFile } from \"../db\"\n\nfunction FileField({ fieldModel, onCompleted }){\n    const [selectedFileName, setSelectedFileName] = useState(\"\")\n    const [progress, setProgress] = useState(0)\n    const [showPregress, setShowProgress] = useState(false)\n    const [err, setErr] = useState(\"\")\n\n    const handleFile = async e => {\n        setErr(\"\")\n        setProgress(0)\n\n        let file = e.target.files[0]\n        let ext = file.name.split('.').pop().toLowerCase()\n\n        if(!file) return\n        if(fieldModel.accepted.indexOf(ext) === -1) return setErr(\"Choose file with thoe following extensions: \" + fieldModel.accepted.join(\", \"))\n        //chechk if file size is biggern than  2MB\n        if(file.size > 2*1024*1024) return setErr(\"File size should be less than than 2MB\")\n\n        setShowProgress(true)\n\n        setSelectedFileName(file.name)\n        let fileName = +(new Date()) + \"-\" + file.name\n        let task = uploadFile(file, fileName)\n        task.on(\"state_changed\", snapshot => {\n            let  percentage = (snapshot.bytesTransferred / snapshot.totalBytes) * 100\n            setProgress(percentage)\n        }, err => setErr(err.message))\n        let snapshot = await task\n        let downloadUrl = await snapshot.ref.getDownloadURL()\n        onCompleted(downloadUrl)\n    }\n\n    return (\n        <div className=\"input\">\n            <label>{fieldModel.title}{fieldModel.required && <span className=\"err\">*</span>}</label>\n            <div className=\"file-field\">\n                <input type=\"file\" className=\"file\" id={fieldModel.title.replace(\" \", \"\")} onChange={handleFile} />\n                <label className=\"btn\" htmlFor={fieldModel.title.replace(\" \", \"\")}>choose file</label>\n                <span>{selectedFileName}</span>\n            </div>\n            { showPregress && (\n            <div className=\"progress-bar\">\n                <div className=\"progress\" style={{width: progress + \"%\"}}></div>\n            </div> )}\n            { err && <p className=\"err\">{err}</p> }\n        </div>\n    )\n}\n\nexport default FileField"]},"metadata":{},"sourceType":"module"}