{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\fatim\\\\Downloads\\\\formable-main\\\\src\\\\components\\\\MultiOptionField.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { arrayToggle } from \"../utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction MultiOptionField({\n  fieldModel,\n  onSelected\n}) {\n  _s();\n\n  const [selected, setSelected] = useState([]);\n\n  const addOption = opt => {\n    let _selected = [...selected];\n\n    if (fieldModel.type === \"multioption-multianswer\") {\n      arrayToggle(_selected, opt);\n    } else {\n      _selected = [opt];\n    }\n\n    setSelected(_selected);\n    onSelected(_selected);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"input\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: [fieldModel.title, fieldModel.required && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"err\",\n        children: \"*\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 62\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this), fieldModel.options.map((option, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input inline\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: fieldModel.type === \"multioption-multianswer\" ? \"checkbox\" : \"radio\",\n        className: \"mr-1\",\n        name: fieldModel.title.replace(\" \", \"\"),\n        onChange: () => addOption(option)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: option\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 21\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 9\n  }, this);\n}\n\n_s(MultiOptionField, \"lGSfRvmoWXlCcuuisg7PtZk/Isc=\");\n\n_c = MultiOptionField;\nexport default MultiOptionField;\n\nvar _c;\n\n$RefreshReg$(_c, \"MultiOptionField\");","map":{"version":3,"sources":["C:/Users/fatim/Downloads/formable-main/src/components/MultiOptionField.js"],"names":["useState","arrayToggle","MultiOptionField","fieldModel","onSelected","selected","setSelected","addOption","opt","_selected","type","title","required","options","map","option","index","replace"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,SAASC,WAAT,QAA4B,UAA5B;;;AAEA,SAASC,gBAAT,CAA0B;AAACC,EAAAA,UAAD;AAAaC,EAAAA;AAAb,CAA1B,EAAoD;AAAA;;AAChD,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAC,EAAD,CAAxC;;AAEA,QAAMO,SAAS,GAAGC,GAAG,IAAI;AACrB,QAAIC,SAAS,GAAG,CAAC,GAAGJ,QAAJ,CAAhB;;AACA,QAAGF,UAAU,CAACO,IAAX,KAAoB,yBAAvB,EAAiD;AAC7CT,MAAAA,WAAW,CAACQ,SAAD,EAAYD,GAAZ,CAAX;AACH,KAFD,MAEK;AACDC,MAAAA,SAAS,GAAG,CAACD,GAAD,CAAZ;AACH;;AACDF,IAAAA,WAAW,CAACG,SAAD,CAAX;AACAL,IAAAA,UAAU,CAACK,SAAD,CAAV;AACH,GATD;;AAWA,sBACI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA,4BACI;AAAA,iBAAQN,UAAU,CAACQ,KAAnB,EAA0BR,UAAU,CAACS,QAAX,iBAAuB;AAAM,QAAA,SAAS,EAAC,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAjD;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAEKT,UAAU,CAACU,OAAX,CAAmBC,GAAnB,CAAuB,CAACC,MAAD,EAASC,KAAT,kBACpB;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,8BACI;AAAO,QAAA,IAAI,EAAEb,UAAU,CAACO,IAAX,KAAoB,yBAApB,GAAgD,UAAhD,GAA6D,OAA1E;AAAoF,QAAA,SAAS,EAAC,MAA9F;AAAqG,QAAA,IAAI,EAAEP,UAAU,CAACQ,KAAX,CAAiBM,OAAjB,CAAyB,GAAzB,EAA8B,EAA9B,CAA3G;AAA8I,QAAA,QAAQ,EAAE,MAAMV,SAAS,CAACQ,MAAD;AAAvK;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA,kBAAQA;AAAR;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA,OAAmCC,KAAnC;AAAA;AAAA;AAAA;AAAA,YADH,CAFL;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH;;GAzBQd,gB;;KAAAA,gB;AA2BT,eAAeA,gBAAf","sourcesContent":["import { useState } from 'react'\n\nimport { arrayToggle } from \"../utils\"\n\nfunction MultiOptionField({fieldModel, onSelected }){\n    const [selected, setSelected] = useState([])\n\n    const addOption = opt => {\n        let _selected = [...selected]\n        if(fieldModel.type === \"multioption-multianswer\"){\n            arrayToggle(_selected, opt)\n        }else{\n            _selected = [opt]\n        }\n        setSelected(_selected)\n        onSelected(_selected)\n    }\n\n    return (\n        <div className=\"input\">\n            <label>{fieldModel.title}{fieldModel.required && <span className=\"err\">*</span>}</label>\n            {fieldModel.options.map((option, index) => (\n                <div className=\"input inline\" key={index}>\n                    <input type={fieldModel.type === \"multioption-multianswer\" ? \"checkbox\" : \"radio\"}  className=\"mr-1\" name={fieldModel.title.replace(\" \", \"\")} onChange={() => addOption(option)} />\n                    <label>{option}</label>\n                </div>\n            ))}\n        </div>\n    )\n}\n\nexport default MultiOptionField"]},"metadata":{},"sourceType":"module"}