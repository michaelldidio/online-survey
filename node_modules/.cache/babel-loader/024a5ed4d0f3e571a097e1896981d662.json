{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\fatim\\\\Downloads\\\\formable-main\\\\src\\\\pages\\\\Create.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport AddFieldModal from \"../components/AddFieldModal\";\nimport RenderPlainForm from \"../components/RenderPlainForm\";\nimport { updateObjState } from \"../utils\";\nimport { createForm as saveForm } from \"../db\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Create() {\n  _s();\n\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [inputType, setInputType] = useState(\"text\");\n  const [err, setErr] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const history = useHistory();\n\n  const openAddModal = inputType => {\n    setShowAddModal(true);\n    setInputType(inputType);\n  };\n\n  const [formModel, setFormModel] = useState({\n    title: \"\",\n    createdAt: +new Date(),\n    fields: [{\n      title: \"Enter your email\",\n      type: \"short-text\",\n      required: true\n    }],\n    endMessage: \"\",\n    expiration: \"\"\n  });\n\n  const addFieldToFormModel = field => {\n    let _model = Object.assign({}, formModel);\n\n    _model.fields.push(field);\n\n    setFormModel(_model);\n  };\n\n  const inputTypes = [\"short-text\", \"long-text\", \"number\", \"multioption-singleanswer\", \"multioption-multianswer\", \"file\"];\n\n  const createForm = async () => {\n    if (loading) return;\n    setErr(\"\");\n    if (!formModel.title.trim()) return setErr(\"Title is required\");\n    if (formModel.title.trim().length < 5 || formModel.title.trim().length > 50) return setErr(\"Title should be 5 - 50 characters long\");\n    if (formModel.expiration.trim() && formModel.expiration < 1) return setErr(\"Validity should be at least an hour\");\n    if (formModel.fields.length < 2) return setErr(\"You need to add at least one field\");\n    setLoading(true);\n\n    try {\n      await saveForm(formModel);\n      setLoading(false);\n      history.push(\"/forms\");\n    } catch (e) {\n      setErr(e.message);\n      setLoading(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"heading\",\n      children: \"Create new form\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Title of the from\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Enter title\",\n          onChange: e => updateObjState(setFormModel, formModel, \"title\", e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), formModel.fields.length > 0 && /*#__PURE__*/_jsxDEV(RenderPlainForm, {\n        model: formModel\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 49\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"End message\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"What should user see after submitting the form\",\n          onChange: e => updateObjState(setFormModel, formModel, \"endMessage\", e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Validity(Optonal)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          placeholder: \"For how many hours the form should be fillable\",\n          onKeyDown: e => {\n            if (e.key === '.' || e.key === '-') {\n              e.preventDefault();\n            }\n          },\n          onChange: e => updateObjState(setFormModel, formModel, \"expiration\", e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"mb-2 text-right\",\n      children: [err && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"err text-right mb-1\",\n        children: err\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 26\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        onClick: createForm,\n        children: loading ? /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"spinner white\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 74\n        }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"create form\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 116\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"add-field-container grey-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Add new field\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this), inputTypes.map((inputType, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        onClick: () => openAddModal(inputType),\n        children: inputType.replace(\"-\", \" \")\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 56\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this), showAddModal && /*#__PURE__*/_jsxDEV(AddFieldModal, {\n      inputType: inputType,\n      close: () => setShowAddModal(false),\n      add: addFieldToFormModel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 31\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Create, \"rFYOkDJ/WNsIK1ex5iUUy0wQ534=\", false, function () {\n  return [useHistory];\n});\n\n_c = Create;\nexport default Create;\n\nvar _c;\n\n$RefreshReg$(_c, \"Create\");","map":{"version":3,"sources":["C:/Users/fatim/Downloads/formable-main/src/pages/Create.js"],"names":["useState","useHistory","AddFieldModal","RenderPlainForm","updateObjState","createForm","saveForm","Create","showAddModal","setShowAddModal","inputType","setInputType","err","setErr","loading","setLoading","history","openAddModal","formModel","setFormModel","title","createdAt","Date","fields","type","required","endMessage","expiration","addFieldToFormModel","field","_model","Object","assign","push","inputTypes","trim","length","e","message","target","value","key","preventDefault","map","index","replace"],"mappings":"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","sourcesContent":["import { useState } from 'react'\nimport { useHistory } from \"react-router-dom\"\n\nimport AddFieldModal from \"../components/AddFieldModal\"\nimport RenderPlainForm from \"../components/RenderPlainForm\"\n\nimport { updateObjState } from \"../utils\"\n\nimport { createForm as saveForm } from \"../db\"\n\nfunction Create(){\n    const [showAddModal, setShowAddModal] = useState(false)\n    const [inputType, setInputType] = useState(\"text\")\n    const [err, setErr] = useState(\"\")\n    const [loading, setLoading] = useState(false)\n\n    const history = useHistory()\n\n    const openAddModal = inputType => {\n        setShowAddModal(true)\n        setInputType(inputType)\n    }\n\n    const [formModel, setFormModel] = useState({\n        title: \"\",\n        createdAt: +(new Date()),\n        fields: [\n            {\n                title: \"Enter your email\",\n                type: \"short-text\",\n                required: true\n            }\n        ],\n        endMessage: \"\",\n        expiration: \"\"\n    })\n\n    const addFieldToFormModel = field => {\n        let _model = Object.assign({}, formModel)\n        _model.fields.push(field)\n        setFormModel(_model)\n    }\n\n    const inputTypes = [\"short-text\", \"long-text\", \"number\", \"multioption-singleanswer\", \"multioption-multianswer\", \"file\"]\n\n    const createForm = async () => {\n        if(loading) return\n        setErr(\"\")\n\n        if(!formModel.title.trim()) return setErr(\"Title is required\")\n        if(formModel.title.trim().length < 5 || formModel.title.trim().length > 50) return setErr(\"Title should be 5 - 50 characters long\")\n\n        if(formModel.expiration.trim() && formModel.expiration < 1) return setErr(\"Validity should be at least an hour\")\n\n        if(formModel.fields.length < 2) return setErr(\"You need to add at least one field\")\n\n        setLoading(true)\n        try{\n            await saveForm(formModel)\n            setLoading(false)\n            history.push(\"/forms\")\n        }catch(e){\n            setErr(e.message)\n            setLoading(false)\n        }\n    }\n\n    return (\n        <div>\n            <h1 className=\"heading\">Create new form</h1>\n            \n            <div className=\"form\">\n                <div className=\"input\">\n                    <label>Title of the from</label>\n                    <input type=\"text\" placeholder=\"Enter title\" onChange={e => updateObjState(setFormModel, formModel ,\"title\", e.target.value)} />\n                </div>\n\n                {formModel.fields.length > 0 && <RenderPlainForm model={formModel} />}\n\n                <div className=\"input\">\n                    <label>End message</label>\n                    <input type=\"text\" placeholder=\"What should user see after submitting the form\" onChange={e => updateObjState(setFormModel, formModel ,\"endMessage\", e.target.value)} />\n                </div>\n\n                <div className=\"input\">\n                    <label>Validity(Optonal)</label>\n                    <input type=\"number\" placeholder=\"For how many hours the form should be fillable\" onKeyDown={e => {if(e.key==='.' || e.key==='-'){e.preventDefault()}}} onChange={e => updateObjState(setFormModel, formModel ,\"expiration\", e.target.value)} />\n                </div>\n            </div>\n\n            <p className=\"mb-2 text-right\">\n                { err && <p className=\"err text-right mb-1\">{err}</p> }\n                <button className=\"btn\" onClick={createForm}>{ loading ? <span className=\"spinner white\"></span> : <span>create form</span>}</button>\n            </p>\n            \n            <div className=\"add-field-container grey-container\">\n                <p>Add new field</p>\n                { inputTypes.map((inputType, index) => <button className=\"btn\" key={index} onClick={() => openAddModal(inputType)}>{inputType.replace(\"-\", \" \")}</button>)}\n            </div>\n            \n            { showAddModal && <AddFieldModal inputType={inputType}  close={() => setShowAddModal(false)} add={addFieldToFormModel} /> }\n        </div>\n    )\n}\n\nexport default Create"]},"metadata":{},"sourceType":"module"}