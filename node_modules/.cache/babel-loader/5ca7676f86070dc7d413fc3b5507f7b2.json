{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\fatim\\\\Downloads\\\\formable-main\\\\src\\\\components\\\\AddFileField.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { arrayToggle } from '../utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AddFileField({\n  inputType,\n  add,\n  close\n}) {\n  _s();\n\n  const [err, setErr] = useState(\"\");\n  const availableTypes = [\"jpg\", \"png\", \"jpeg\", \"pdf\", \"txt\"];\n  const [title, setTitle] = useState(\"\");\n  const [required, setRequired] = useState(false);\n  const [fileTypes, setFileTypes] = useState([]);\n\n  const addFileType = type => {\n    let _fileTypes = [...fileTypes];\n    arrayToggle(_fileTypes, type);\n    setFileTypes(_fileTypes);\n  };\n\n  const addField = () => {\n    if (!title.trim()) return setErr(\"Title is required\");\n    if (title.trim().length < 4) return setErr(\"Title should be atleast 4 characters long\");\n    if (!fileTypes.length) return setErr(\"Select atleast one file type\");\n    add({\n      title,\n      required,\n      type: inputType,\n      accepted: fileTypes\n    });\n    close();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Enter field title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Eg. Upload your resume\",\n        onChange: e => setTitle(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Select acceptable file types\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inline-inputs\",\n        children: availableTypes.map((type, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input inline\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            className: \"mr-1\",\n            onChange: () => addFileType(type)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\".\", type]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 29\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input inline\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Required: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        onChange: () => setRequired(!required)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), err && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"err mb-1\",\n      children: err\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn\",\n      onClick: addField,\n      children: \"add field\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AddFileField, \"YgF1Vasr8cljHzM+UG/MGPWwtl8=\");\n\n_c = AddFileField;\nexport default AddFileField;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddFileField\");","map":{"version":3,"sources":["C:/Users/fatim/Downloads/formable-main/src/components/AddFileField.js"],"names":["useState","arrayToggle","AddFileField","inputType","add","close","err","setErr","availableTypes","title","setTitle","required","setRequired","fileTypes","setFileTypes","addFileType","type","_fileTypes","addField","trim","length","accepted","e","target","value","map","index"],"mappings":"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","sourcesContent":["import { useState } from 'react'\nimport { arrayToggle } from '../utils'\nfunction AddFileField({inputType, add, close}){\n    const [err, setErr ] = useState(\"\")\n\n    const availableTypes = [\"jpg\", \"png\", \"jpeg\", \"pdf\", \"txt\"]\n\n    const [title, setTitle] = useState(\"\")\n    const [required, setRequired] = useState(false)\n    const [fileTypes, setFileTypes] = useState([])\n\n    const addFileType = type => {\n        let _fileTypes = [...fileTypes]\n        arrayToggle(_fileTypes, type)\n        setFileTypes(_fileTypes)\n    }\n\n    const addField = () => {\n        if(!title.trim()) return setErr(\"Title is required\")\n        if(title.trim().length < 4) return setErr(\"Title should be atleast 4 characters long\")\n        if(!fileTypes.length) return setErr(\"Select atleast one file type\")\n        add({\n            title,\n            required,\n            type: inputType,\n            accepted: fileTypes\n        })\n        close()\n    }\n\n    return (\n        <div>\n            <div className=\"input\">\n                <label>Enter field title</label>\n                <input type=\"text\" placeholder=\"Eg. Upload your resume\" onChange={e => setTitle(e.target.value)} />\n            </div>\n            <div className=\"input\">\n                <label>Select acceptable file types</label>\n                <div className=\"inline-inputs\">\n                    { availableTypes.map((type, index) => (\n                        <div className=\"input inline\" key={index}>\n                            <input type=\"checkbox\" className=\"mr-1\" onChange={() => addFileType(type)} />\n                            <label>.{type}</label>\n                        </div>\n                    )) }\n                </div>\n            </div>\n            <div className=\"input inline\">\n                <label>Required: </label>\n                <input type=\"checkbox\" onChange={() => setRequired(!required)} />\n            </div>\n            {err && <p className=\"err mb-1\">{err}</p>}\n            <button className=\"btn\" onClick={addField}>add field</button>\n        </div>\n    )\n}\n\nexport default AddFileField"]},"metadata":{},"sourceType":"module"}