{"ast":null,"code":"export const updateObjState = (setter, model, prop, val) => {\n  let _model = Object.assign({}, model);\n\n  _model[prop] = val;\n  setter(_model);\n};\nexport const updateArrOfObjState = (setter, model, index, prop, val) => {\n  let _model = [...model];\n  _model[index] = Object.assign({}, _model[index], {\n    [prop]: val\n  });\n  setter(_model);\n}; //toggles an item in array\n\nexport const arrayToggle = (arr, item) => {\n  let idx = arr.indexOf(item);\n\n  if (idx > -1) {\n    arr.splice(idx, 1);\n  } else {\n    arr.push(item);\n  }\n};\nexport const validateEmail = email => {\n  const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(String(email).toLowerCase());\n};\nexport const getDateFromMillis = milliseconds => {\n  let date = new Date(milliseconds);\n  return date.toLocaleString();\n};\nexport const expired = (createDateMillis, hours) => {\n  if (!hours) return false;\n  let currentDateMillis = +new Date();\n  let hoursMillis = parseInt(hours) * 60 * 60 * 1000;\n  return currentDateMillis - createDateMillis < hoursMillis;\n};\nexport const createFillableModel = model => {\n  let fillableModel = [];\n  let fields = model.fields;\n\n  for (let field in fields) {\n    let fld = fields[field]; // let fieldModel = {\n    //     title: fld.title,\n    //     required: fld.required,\n    //     type: fld.type,\n    //     value: fld.type === \"multioption-singleanswer\" || fld.type === \"multioption-multianswer\" ? [] : \"\"\n    // }\n    // fillableModel.push(fieldModel)\n\n    fillableModel.push({ ...fld,\n      value: fld.type === \"multioption-singleanswer\" || fld.type === \"multioption-multianswer\" ? [] : \"\"\n    });\n  }\n\n  return fillableModel;\n};\nexport const createSubmitableModel = fields => {\n  let submitableModel = [];\n\n  for (let field in fields) {\n    let fld = fields[field];\n    if (!fld.value || fld.value.length < 1) continue;\n    let fieldModel = {\n      title: fld.title,\n      value: fld.value,\n      type: fld.type\n    };\n    submitableModel.push(fieldModel);\n  }\n\n  return submitableModel;\n};\nexport const hasError = fields => {\n  for (let field of fields) {\n    if (!field.required && !field.value.trim()) continue;\n\n    if ([\"short-text\", \"long-text\", \"number\", \"file\"].indexOf(field.type) > -1) {\n      if (field.required && !field.value.trim()) return `'${field.title}' is a required field`;\n    } else {\n      if (field.required && field.value.length < 1) return `'${field.title}' is a required field`;\n    }\n  }\n\n  return false;\n};","map":{"version":3,"sources":["C:/Users/fatim/Downloads/formable-main/src/utils/index.js"],"names":["updateObjState","setter","model","prop","val","_model","Object","assign","updateArrOfObjState","index","arrayToggle","arr","item","idx","indexOf","splice","push","validateEmail","email","re","test","String","toLowerCase","getDateFromMillis","milliseconds","date","Date","toLocaleString","expired","createDateMillis","hours","currentDateMillis","hoursMillis","parseInt","createFillableModel","fillableModel","fields","field","fld","value","type","createSubmitableModel","submitableModel","length","fieldModel","title","hasError","required","trim"],"mappings":"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","sourcesContent":["export const updateObjState = (setter, model, prop, val) => {\n    let _model = Object.assign({}, model)\n    _model[prop] = val\n    setter(_model)\n}\nexport const updateArrOfObjState = (setter, model, index, prop, val) => {\n    let _model = [...model]\n    _model[index] = Object.assign({}, _model[index], { [prop]: val })\n    setter(_model)\n}\n\n//toggles an item in array\nexport const arrayToggle = (arr, item) => {\n    let idx = arr.indexOf(item)\n    if(idx > -1){\n        arr.splice(idx, 1)\n    }else{\n        arr.push(item)\n    }\n}\n\nexport const validateEmail = email => {\n    const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(String(email).toLowerCase());\n}\n\nexport const getDateFromMillis = milliseconds => {\n    let date = new Date(milliseconds)\n    return date.toLocaleString()\n}\n\nexport const expired = (createDateMillis, hours) => {\n    if(!hours) return false\n    let currentDateMillis = +(new Date())\n    let hoursMillis = parseInt(hours) * 60 * 60 * 1000\n    return (currentDateMillis - createDateMillis) < hoursMillis\n}\n\nexport const createFillableModel = model => {\n    let fillableModel = []\n    let fields = model.fields\n    for(let field in fields){\n        let fld = fields[field]\n        // let fieldModel = {\n        //     title: fld.title,\n        //     required: fld.required,\n        //     type: fld.type,\n        //     value: fld.type === \"multioption-singleanswer\" || fld.type === \"multioption-multianswer\" ? [] : \"\"\n        // }\n        // fillableModel.push(fieldModel)\n        fillableModel.push({...fld, value: fld.type === \"multioption-singleanswer\" || fld.type === \"multioption-multianswer\" ? [] : \"\"})\n    }\n    return fillableModel\n}\n\nexport const createSubmitableModel = fields => {\n    let submitableModel = []\n    for(let field in fields){\n        let fld = fields[field]\n\n        if(!fld.value || fld.value.length < 1) continue\n        \n        let fieldModel = {\n            title: fld.title,\n            value: fld.value,\n            type: fld.type\n        }\n        submitableModel.push(fieldModel)\n    }\n    return submitableModel\n}\n\nexport const hasError = fields => {\n    for(let field of fields){\n        if(!field.required && !field.value.trim()) continue\n\n        if([\"short-text\", \"long-text\", \"number\", \"file\"].indexOf(field.type) > -1){\n            if(field.required && !field.value.trim()) return `'${field.title}' is a required field`\n        }else{\n            if(field.required && field.value.length < 1) return `'${field.title}' is a required field`\n        }\n    }\n    return false\n}"]},"metadata":{},"sourceType":"module"}