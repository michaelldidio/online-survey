{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { auth, firestore, storage } from \"./firebase\";\nexport const signup = async (email, pwd) => auth.createUserWithEmailAndPassword(email.trim(), pwd.trim());\nexport const login = async (email, pwd) => auth.signInWithEmailAndPassword(email.trim(), pwd.trim());\nexport const logout = () => {\n  localStorage.setItem(\"gfc-user\", \"\");\n  return auth.signOut();\n};\nexport const useAuthenticated = () => {\n  _s();\n\n  const [user, setUser] = useState({});\n  useEffect(() => {\n    auth.onAuthStateChanged(usr => setUser(usr));\n  }, []);\n  return user;\n};\n\n_s(useAuthenticated, \"l0nCqodPWuiGgcnCHidP90F0Gls=\");\n\nexport const createForm = formModel => {\n  const user = JSON.parse(localStorage.getItem(\"gfc-user\"));\n  return firestore.collection(\"forms\").add({ ...formModel,\n    uid: user.uid\n  });\n};\nexport const getForms = async () => {\n  const user = JSON.parse(localStorage.getItem(\"gfc-user\"));\n  let docs = await firestore.collection(\"forms\").get({\n    uid: user.uid\n  });\n  docs = docs.docs;\n  let forms = docs.map(doc => ({ ...doc.data(),\n    id: doc.id\n  }));\n  return forms;\n};\nexport const getForm = async ops => {\n  let docs = await firestore.collection(\"forms\").get(ops);\n  let doc = docs.docs[0];\n  doc = { ...doc.data(),\n    id: doc.id\n  };\n  return doc;\n};\nexport const deleteForm = async formId => {\n  let submissions = await firestore.collection(\"submissions\").where(\"formId\", \"==\", formId).get();\n  submissions = submissions.docs;\n\n  for (let submission of submissions) {\n    await firestore.collection(\"submissions\").doc(submission.id).delete();\n  }\n\n  return firestore.collection(\"forms\").doc(formId).delete();\n};\nexport const uploadFile = (file, fileName) => {\n  let ref = storage.ref(\"files/\" + fileName);\n  return ref.put(file);\n};\nexport const submitForm = (submission, formId) => firestore.collection(\"submissions\").add({\n  submission,\n  formId\n});\nexport const getSubmissions = async opts => {\n  let docs = await firestore.collection(\"submissions\").get(opts);\n  docs = docs.docs;\n  let submissions = docs.map(doc => ({ ...doc.data(),\n    id: doc.id\n  }));\n  console.log(submissions);\n  return submissions;\n};","map":{"version":3,"sources":["C:/Users/fatim/Desktop/SurveysFinal/src/db/index.js"],"names":["useState","useEffect","auth","firestore","storage","signup","email","pwd","createUserWithEmailAndPassword","trim","login","signInWithEmailAndPassword","logout","localStorage","setItem","signOut","useAuthenticated","user","setUser","onAuthStateChanged","usr","createForm","formModel","JSON","parse","getItem","collection","add","uid","getForms","docs","get","forms","map","doc","data","id","getForm","ops","deleteForm","formId","submissions","where","submission","delete","uploadFile","file","fileName","ref","put","submitForm","getSubmissions","opts","console","log"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\"\nimport { auth, firestore, storage } from \"./firebase\"\n\nexport const signup = async (email, pwd) => auth.createUserWithEmailAndPassword(email.trim(), pwd.trim())\nexport const login = async (email, pwd) => auth.signInWithEmailAndPassword(email.trim(), pwd.trim())\nexport const logout = () => {\n    localStorage.setItem(\"gfc-user\", \"\")\n    return auth.signOut()\n}\n\nexport const useAuthenticated = () => {\n    const [user, setUser] = useState({})\n    useEffect(() => {\n        auth.onAuthStateChanged(usr => setUser(usr))\n    }, [])\n    return user\n}\n\nexport const createForm = formModel => {\n    const user = JSON.parse(localStorage.getItem(\"gfc-user\"))\n    return firestore.collection(\"forms\").add({...formModel, uid: user.uid})\n}\n\nexport const getForms = async () => {\n    const user = JSON.parse(localStorage.getItem(\"gfc-user\"))\n    let docs = await firestore.collection(\"forms\").get({\n        uid: user.uid\n    })\n    docs = docs.docs\n    let forms = docs.map(doc => ({...doc.data(), id: doc.id}))\n    return forms\n}\n\nexport const getForm = async ops => {\n    let docs = await firestore.collection(\"forms\").get(ops)\n    let doc = docs.docs[0]\n    doc = {...doc.data(), id: doc.id }\n    return doc\n}\n\nexport const deleteForm = async formId => {\n    let submissions = await firestore.collection(\"submissions\").where(\"formId\", \"==\", formId).get()\n    submissions = submissions.docs\n    for(let submission of submissions) {\n        await firestore.collection(\"submissions\").doc(submission.id).delete()\n    }\n    return firestore.collection(\"forms\").doc(formId).delete()\n}\n\nexport const uploadFile = (file, fileName) => {\n    let ref = storage.ref(\"files/\" + fileName)\n    return ref.put(file)\n}\n\nexport const submitForm = (submission, formId) => firestore.collection(\"submissions\").add({\n    submission,\n    formId\n})\n\nexport const getSubmissions = async opts => {\n    let docs = await firestore.collection(\"submissions\").get(opts)\n    docs = docs.docs\n    let submissions = docs.map(doc => ({...doc.data(), id: doc.id}))\n    console.log(submissions);\n    return submissions\n}\n\n"]},"metadata":{},"sourceType":"module"}